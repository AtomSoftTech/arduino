// Weather Station with LCD TFT display
// Based on 
//   Graphics library (C)2012 Henning Karlsen
//   Adafruit_BMP085 by Adafruit
//   i2c_scanner from various sources...
// Author:
// Helge Langehaug

#include <UTFT.h>    // http://www.henningkarlsen.com/electronics
#include <UTouch.h>  // http://www.henningkarlsen.com/electronics
#include <Adafruit_BMP085.h> // https://github.com/adafruit/Adafruit-BMP085-Library
#include <Wire.h>

//
// Declare which fonts we will be using
extern uint8_t SmallFont[];
extern uint8_t BigFont[];

// Using Arduino Mega and 3.2' TFT LCD 240x400 Display
UTFT myGLCD(TFT01_32WD,38,39,40,41);
UTouch myTouch(6,5,4,3,2);
int counter = 0;
int x, y;
Adafruit_BMP085 bmp;

#define DS1307_ADDRESS 0x68
byte zero = 0x00;
int p= 1000;
int delta = 1;
void setup(){
  Wire.begin();
  Serial.begin(9600);
  randomSeed(analogRead(0)); // ??
  //setDateTime();
  printDate();
  initGraphics();
  myTouch.InitTouch();
  myTouch.setPrecision(PREC_LOW);
  //myTouch.setPrecision(PREC_MEDIUM);
  //myTouch.setPrecision(PREC_HI);
  //myTouch.setPrecision(PREC_EXTREME);

  printDate();
   
  
  //barGraph();
  //i2c_scanner();
}

bool menuMode = false;

int secondSinceLastHistory = 9999;
void loop(){
                myGLCD.setBackColor(255,255,255);

  printDate();
  showPressure();
  
  for (int i = 0; i<18; i++){
    checkTouch();
    delay(50);
  }
  
  // every 30 minutes
  if (secondSinceLastHistory > 60 * 30) {
    secondSinceLastHistory = 0;
    addHistoryValue(getMbar());
  }
  secondSinceLastHistory += 1;
  /*
  if (p>1040){
    delta = -3;
  } else if (p<960) {
     delta = 4;
  }
    p=p+delta;
  */ 
}

//******************* GRAPHICS INIT ***************************
void initGraphics() {
  myGLCD.InitLCD();
  myGLCD.setFont(SmallFont);
  myGLCD.fillScr(240,240,240);
  myGLCD.setBackColor(240,240,240);
  myGLCD.setColor(0, 255, 0);
  
  
  showBitmap();
}

//******************* BARGRAPH ************************
void drawBar(int index, int value, int valueOffset){
  int maxValue = 100;
  
  // lower left corner coordinates for the bargrah
  int yaxis = 105;
  int xaxis = 110;
  
  int margin = 2;
  int width = 6;
  
  int height = value - valueOffset;
  if (height < 1){
    height = 0;
  }
  //int height = value - valueOffset;

  int x1 = index * width;
  int x2 = x1 + width - margin;
  
  
  // given value range (after offset) is between 0 and 80
  // and display height = 100, adjust to full display range
  height = height/0.8;

  
  // draw it
  myGLCD.setColor(0,0,255);
  myGLCD.fillRect(xaxis + x1, yaxis, xaxis + x2, yaxis-height);
  
  // clear top (to replace previous bar if it was higher)
  myGLCD.setColor(240,240,240);
  myGLCD.fillRect(xaxis + x1, yaxis - maxValue, xaxis + x2, yaxis-height);

  myGLCD.setColor(0,0,150);
  myGLCD.drawRect(xaxis, yaxis, xaxis + 24 * width, yaxis - maxValue);



}


int history[] = {960,1000,1040,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
void addHistoryValue(int value){

  // shift left
  for (int i = 1; i<24; i++){
    history[i-1] = history[i];
  }
  history[23] = value;
  
  // given max history 1040, min history 960, total of 80 points
  // convert to bar scale
  //int bars[24];
  //for (int i = 1; i<24; i++){
  //  bars[i] = history[i] - 960; // given 950 is the lowest value we can possibly have in history
  //}
  
  drawMillibarGraph(history, 24);
}


void drawMillibarGraph(int values[], int nr_of_values){
  
  for (int i = 0; i< nr_of_values; i++){
    drawBar(i,values[i], 960); // value offset 960 gives us 0 in graph for 960mBar
  }
}

boolean pressMode = false;
//******************* TOUCH ***************************
void checkTouch(){
  bool dataAvailable = myTouch.dataAvailable();
  if (dataAvailable && pressMode == false) {
    pressMode = true;
    int menuHeight=150;
    if (menuMode == false) {
      
       menuMode = true;
       myGLCD.setColor(0,0,0);
       myGLCD.fillRect(0,240,399,240-menuHeight);
       myGLCD.setColor(0,255,0);
                     myGLCD.setBackColor(0,0,0);

       myGLCD.print("Menu On ", 170, 210);

    } else {
      menuMode = false;
             myGLCD.setColor(255,255,255);

             myGLCD.fillRect(0,240,399,240-menuHeight);
              myGLCD.setColor(0,255,0);

              myGLCD.setBackColor(255,255,255);

       myGLCD.print("Menu Off", 170, 210);
    }
  } else if (dataAvailable && pressMode == true){
    // not released yet...
  } else {
    // released...
    pressMode = false;
  }
  /*
  else {
      myTouch.read();
      myGLCD.setColor(0,255,0);
      x=myTouch.getX();
      y=myTouch.getY();
      myGLCD.printNumI(x, 0, 0, 3);
      myGLCD.printNumI(y, 50, 0, 3);
      myGLCD.fillCircle(x,y,10);
  }
  */
}

//******************* CLOCK/DATE ***********************
byte decToBcd(byte val){
// Convert normal decimal numbers to binary coded decimal
  return ( (val/10*16) + (val%10) );
}
byte bcdToDec(byte val)  {
// Convert binary coded decimal to normal decimal numbers
  return ( (val/16*10) + (val%16) );
}
void setDateTime(){

  byte second =      30; //0-59
  byte minute =      35; //0-59
  byte hour =        19; //0-23
  byte weekDay =     3; //1-7
  byte monthDay =    4; //1-31
  byte month =       12; //1-12
  byte year  =       13; //0-99

  Wire.beginTransmission(DS1307_ADDRESS);
  Wire.write(zero); //stop Oscillator

  Wire.write(decToBcd(second));
  Wire.write(decToBcd(minute));
  Wire.write(decToBcd(hour));
  Wire.write(decToBcd(weekDay));
  Wire.write(decToBcd(monthDay));
  Wire.write(decToBcd(month));
  Wire.write(decToBcd(year));

  Wire.write(zero); //start 

  Wire.endTransmission();

}
void printDate(){

  // Reset the register pointer
  Wire.beginTransmission(DS1307_ADDRESS);

  Wire.write(zero);
  Wire.endTransmission();

  Wire.requestFrom(DS1307_ADDRESS, 7);

  int second = bcdToDec(Wire.read());
  int minute = bcdToDec(Wire.read());
  int hour = bcdToDec(Wire.read() & 0b111111); //24 hour time
  int weekDay = bcdToDec(Wire.read()); //0-6 -> sunday - Saturday
  int monthDay = bcdToDec(Wire.read());
  int month = bcdToDec(Wire.read());
  int year = bcdToDec(Wire.read());


  /*  ANY GOOD ???????
      calculates the moon phase (0-7), accurate to 1 segment.
      0 = > new moon.
      4 => full moon.
  */
  int phase2 = moon_phase(2000+year, month, monthDay);
  myGLCD.printNumI(phase2, 10, 70);

  
  /* Another calculation, seems to work */
  char phaseText[30];
  float phase = GetPhase(2000+year, month, monthDay, phaseText);
  myGLCD.setColor(100,100,100);
  myGLCD.print("Moon:", 10,30);
  myGLCD.printNumF(phase, 2, 10, 50);
  
  myGLCD.setFont(SmallFont);
  myGLCD.print(phaseText, 10, 115);

  myGLCD.setFont(BigFont);

  y = 150;
  myGLCD.setColor(0, 0, 0);
  myGLCD.printNumI(hour, 120, y, 2 ,'0');
  myGLCD.print(":", 150, y);
  myGLCD.printNumI(minute, 165, y, 2 ,'0');
  myGLCD.print(":", 195, y);
  myGLCD.printNumI(second, 210, y, 2 ,'0');
  
  int y = 170;
  myGLCD.setColor(150,150,150);
  myGLCD.printNumI(monthDay, 120, y, 2);
  myGLCD.print("/", 150, y);
  myGLCD.printNumI(month, 165, y, 2);
  myGLCD.print("/", 195, y);
  myGLCD.printNumI(year, 210, y, 2);
  

}




//******************* I2C SCANNING ***********************
void i2c_scanner()
{
    myGLCD.setColor(255, 0, 0);

  byte error, address;
  int nDevices;
  
  Serial.println("Scanning...");

  nDevices = 0;
  for(address = 1; address < 127; address++ ) 
  {
    // The i2c_scanner uses the return value of
    // the Write.endTransmisstion to see if
    // a device did acknowledge to the address.
    Wire.beginTransmission(address);
    error = Wire.endTransmission();

    
     myGLCD.setFont(SmallFont);
    myGLCD.print("Searching for I2C devices, found:", 30, 150);

    if (error == 0)
    {
      Serial.print("I2C device found at address 0x");
      if (address<16) 
        Serial.print("0");
      Serial.print(address,HEX);
      Serial.println("  !");
      myGLCD.printNumI(address, 30 + nDevices*30, 170);
      nDevices++;
    }
    else if (error==4) 
    {
      Serial.print("Unknow error at address 0x");
      if (address<16) 
        Serial.print("0");
      Serial.println(address,HEX);
    }    
  }
  if (nDevices == 0){
    Serial.println("No I2C devices found\n");
    myGLCD.print("No I2C devices found", 30, 150);
  }
  else
    Serial.println("done\n");

}


//******************* PRESSURE ***************************
void showPressure()
{
  myGLCD.setFont(BigFont);
  if (!bmp.begin()) {
    myGLCD.print("Could not find a valid BMP085 pressure sensor.", CENTER, 0);
    myGLCD.print("Anything connected at all ???", CENTER, 45);
  } else {
    myGLCD.setColor(0, 0, 255);
    myGLCD.printNumF(getMbar(), 1, 270, 30);
    myGLCD.print("mBar", 270, 45);
    
    myGLCD.print("Temp:", 270, 65);
    myGLCD.printNumF(bmp.readTemperature(), 1, 270, 80);
    

  }
}

float getMbar(){
  return bmp.readPressure()/100;
}

// Ref:http://www.nano-reef.com/topic/217305-a-lunar-phase-function-for-the-arduino/
float GetPhase(int nYear, int nMonth, int nDay, char *phaseText) // calculate the current phase of the moon
{
float phase;
double AG, IP;
long YY, MM, K1, K2, K3, JD;
YY = nYear - floor((12 - nMonth) / 10);
MM = nMonth + 9;
if (MM >= 12)
{
MM = MM - 12;
}
K1 = floor(365.25 * (YY + 4712));
K2 = floor(30.6 * MM + 0.5);
K3 = floor(floor((YY / 100) + 49) * 0.75) - 38;
JD = K1 + K2 + nDay + 59;
if (JD > 2299160)
{
JD = JD - K3;
}
IP = MyNormalize((JD - 2451550.1) / 29.530588853);
AG = IP*29.53;
phase = 0;
if ((AG < 1.84566) && (phase == 0))
{
phase = 0; //new; 0% illuminated
strcpy(phaseText,"New              XXXXXXXXXX");
}
if ((AG < 5.53699) && (phase == 0))
{
phase = .25; //Waxing crescent; 25% illuminated
strcpy(phaseText,"Waxing crescent  XXXXXX__");
}
if ((AG < 9.922831) && (phase == 0))
{
phase = .50; //First quarter; 50% illuminated
strcpy(phaseText,"First quarter    XXXX____");

}
if ((AG < 12.91963) && (phase == 0))
{
phase = .75; //Waxing gibbous; 75% illuminated
strcpy(phaseText,"Waxing gibbous   XX______");

}
if ((AG < 16.61096) && (phase == 0))
{
phase = 1; //Full; 100% illuminated
strcpy(phaseText,"Full             ________");

}
if ((AG < 20.30228) && (phase == 0))
{
phase = .75; //Waning gibbous; 75% illuminated
strcpy(phaseText,"Waning gibbous   ______XX");

}
if ((AG < 23.99361) && (phase == 0))
{
phase = .50; //Last quarter; 50% illuminated
strcpy(phaseText,"Last quarter     ____XXXX");

}
if ((AG < 27.68493) && (phase == 0))
{
phase = .25; //Waning crescent; 25% illuminated
strcpy(phaseText,"Waning crescent  __XXXXXX");

}
if (phase == 0)
{
phase = 0; //default to new; 0% illuminated
strcpy(phaseText,"New              XXXXXXXX");

}
return phase;
}

double MyNormalize(double v)
{
v = v - floor(v);
if (v < 0)
v = v + 1;
return v;
} 


// Any good ??????
int moon_phase(int y, int m, int d)
{
    /*
      calculates the moon phase (0-7), accurate to 1 segment.
      0 = > new moon.
      4 => full moon.
      */

    int c,e;
    double jd;
    int b;

    if (m < 3) {
        y--;
        m += 12;
    }
    ++m;
    c = 365.25*y;
    e = 30.6*m;
    jd = c+e+d-694039.09;  /* jd is total days elapsed */
    jd /= 29.53;           /* divide by the moon cycle (29.53 days) */
    b = jd;		   /* int(jd) -> b, take integer part of jd */
    jd -= b;		   /* subtract integer part to leave fractional part of original jd */
    b = jd*8 + 0.5;	   /* scale fraction from 0-8 and round by adding 0.5 */
    b = b & 7;		   /* 0 and 8 are the same so turn 8 into 0 */
    return b;
}







prog_uint16_t first_quarter[3600] PROGMEM={

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0010 (16) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0020, 0x0000, 0x0020, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0020 (32) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0020, 0x0000, 0x0000, 0x0000, 0x0020, 0x0000, 0x0000,   // 0x0030 (48) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0040 (64) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0050 (80) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0841, 0x0000, 0x0021, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0001, 0x0021,   // 0x0060 (96) pixels

0x0021, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0020, 0x0000, 0x0000, 0x0000, 0x0020, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0070 (112) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0080 (128) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0090 (144) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x2966, 0x528B, 0x4A4A, 0x3186, 0x1082, 0x0000, 0x0000, 0x0021, 0x0001, 0x0000,   // 0x00A0 (160) pixels

0x0841, 0x0000, 0x0000, 0x0000, 0x0000, 0x0020, 0x0020, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x00B0 (176) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x00C0 (192) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x00D0 (208) pixels

0x0000, 0x1082, 0x8410, 0xCE7A, 0xE71D, 0xE73D, 0xE6FC, 0xC618, 0x8C51, 0x4A49, 0x10A3, 0x0000, 0x0000, 0x0841, 0x0861, 0x0000,   // 0x00E0 (224) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x00F0 (240) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0100 (256) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0020, 0x0000, 0x0000, 0x0000, 0x0000, 0x6B6E, 0xBDF8,   // 0x0110 (272) pixels

0xCE7A, 0xC5F8, 0xBDF8, 0xDEBB, 0xFFDF, 0xFFFF, 0xEF5E, 0xCE7A, 0x630C, 0x0000, 0x0000, 0x0861, 0x0000, 0x0000, 0x1082, 0x0000,   // 0x0120 (288) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0130 (304) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0140 (320) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0020, 0x0001, 0x0021, 0x630C, 0xA4F4, 0x9CD4, 0xA535, 0xB597, 0xBDD8,   // 0x0150 (336) pixels

0xC618, 0xD69A, 0xEF5D, 0xFFFF, 0xF7BF, 0xEF5D, 0x6B6E, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0160 (352) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0170 (368) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0180 (384) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x4A49, 0x7BF0, 0x8C72, 0x94B3, 0xA4F4, 0xAD35, 0xAD76, 0xBDD7, 0xCE59, 0xD69B,   // 0x0190 (400) pixels

0xFFFF, 0xF79E, 0xFFFF, 0xF79E, 0x738E, 0x0021, 0x0000, 0x0021, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x01A0 (416) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x01B0 (432) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0020, 0x0000,   // 0x01C0 (448) pixels

0x0000, 0x0000, 0x39E8, 0x736E, 0x7BF0, 0x8411, 0x8C31, 0x8C72, 0x9493, 0x9CD3, 0x9CF4, 0xA515, 0xC618, 0xE71C, 0xE71D, 0xEF5E,   // 0x01D0 (464) pixels

0xF7BF, 0xAD55, 0x3186, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x01E0 (480) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x01F0 (496) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x4229, 0x7BF0,   // 0x0200 (512) pixels

0x7BF0, 0x8411, 0x8C31, 0x9CD4, 0x94B3, 0x9493, 0xA535, 0xA4F4, 0xAD76, 0xDEDC, 0xCE59, 0xCE7A, 0xD6BB, 0xF7BF, 0xEF7E, 0x528A,   // 0x0210 (528) pixels

0x0000, 0x0020, 0x0000, 0x0000, 0x0000, 0x0000, 0x0020, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0220 (544) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0230 (560) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x4A29, 0x8411, 0x8411, 0x8C32, 0x9493, 0xA515,   // 0x0240 (576) pixels

0xA515, 0xA535, 0xB576, 0xA535, 0xB5B7, 0xD69B, 0xE6FC, 0xE73D, 0xCE5A, 0xC639, 0xEF5D, 0xEF7E, 0x528A, 0x0000, 0x0000, 0x0020,   // 0x0250 (592) pixels

0x0020, 0x0000, 0x0000, 0x1082, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0260 (608) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0270 (624) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x4229, 0x8C31, 0x9493, 0x8C32, 0x9493, 0xA4F5, 0xAD36, 0xAD56, 0xAD35, 0xAD56,   // 0x0280 (640) pixels

0xBDD8, 0xBDF8, 0xCE39, 0xCE7A, 0xD6BB, 0xCE7A, 0xC618, 0xDEFC, 0xEF7D, 0x6B6D, 0x0000, 0x0000, 0x0000, 0x0841, 0x0000, 0x0000,   // 0x0290 (656) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x02A0 (672) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0020, 0x0000, 0x0000, 0x0000,   // 0x02B0 (688) pixels

0x0000, 0x0000, 0x41E8, 0x83F0, 0x9CD4, 0x8C52, 0x9CD4, 0xA515, 0xAD56, 0xAD36, 0x94B3, 0xA535, 0xBDB7, 0xBDD8, 0xBDF8, 0xBDD8,   // 0x02C0 (704) pixels

0xD6BB, 0xDEDB, 0xBDF8, 0xCE39, 0xD69A, 0xFFFF, 0x5AEB, 0x0861, 0x0000, 0x0861, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x02D0 (720) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x02E0 (736) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x31A7, 0x736E,   // 0x02F0 (752) pixels

0x8C52, 0x9CB4, 0xA535, 0x9CD4, 0xA515, 0xAD36, 0x94B3, 0x9CD4, 0xAD56, 0xB597, 0xAD76, 0xC5F8, 0xD69B, 0xCE7A, 0xCE7A, 0xDEDC,   // 0x0300 (768) pixels

0xCE59, 0xE73C, 0xF79E, 0x6B4D, 0x0841, 0x0000, 0x0020, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0310 (784) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0320 (800) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x3187, 0x630D, 0x738F, 0x94B4, 0x9473, 0x6B4E,   // 0x0330 (816) pixels

0x73B0, 0x9493, 0x9493, 0x9493, 0x9493, 0x9CF4, 0x9492, 0xAD55, 0xCE39, 0xCE5A, 0xD67A, 0xC618, 0xE73D, 0xCE59, 0xD69A, 0xFFDF,   // 0x0340 (832) pixels

0x3186, 0x0020, 0x0861, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0350 (848) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0360 (864) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x31A7, 0x5ACC, 0x6B2E, 0x8411, 0x632E, 0x420A, 0x52AC, 0x6B6F, 0x7BD0, 0x8411,   // 0x0370 (880) pixels

0x73AF, 0xA515, 0xA514, 0x9CD3, 0xB5B7, 0xD67A, 0xDEDC, 0xD67A, 0xD6BA, 0xE71C, 0xD6BA, 0xD69A, 0xDEFB, 0x0000, 0x0000, 0x0000,   // 0x0380 (896) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0390 (912) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x03A0 (928) pixels

0x0000, 0x0021, 0x39C8, 0x5ACC, 0x6B4E, 0x738F, 0x4A4A, 0x4A2A, 0x5AED, 0x5AAC, 0x62ED, 0x738F, 0x6B6E, 0xAD35, 0xBDB7, 0xAD76,   // 0x03B0 (944) pixels

0xC619, 0xD69B, 0xCE7A, 0xDEDC, 0xCE59, 0xEF5D, 0xCE59, 0xCE59, 0xFFDF, 0x8410, 0x0841, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x03C0 (960) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x03D0 (976) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0001, 0x0000, 0x39A8, 0x6B2E,   // 0x03E0 (992) pixels

0x5AED, 0x4A6B, 0x4A4A, 0x4A6B, 0x4A4A, 0x528B, 0x630D, 0x6B6F, 0x6B6F, 0x738F, 0xA536, 0xC63A, 0xCE5A, 0xD69B, 0xD6BB, 0xE73D,   // 0x03F0 (1008) pixels

0xDEFC, 0xE71C, 0xD69A, 0xD69A, 0xDEDB, 0xE71C, 0x0841, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0400 (1024) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0410 (1040) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x31A8, 0x630E, 0x73B0, 0x5ACC, 0x4A6B, 0x4A6B,   // 0x0420 (1056) pixels

0x528B, 0x5ACC, 0x632E, 0x6B4E, 0x5AED, 0x5AED, 0x8432, 0xB5B8, 0xCE7B, 0xDEDC, 0xDEDC, 0xD6BB, 0xD6BB, 0xD69A, 0xD6BB, 0xCE59,   // 0x0430 (1072) pixels

0xD69A, 0xFFBF, 0x8431, 0x0000, 0x0000, 0x0020, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0440 (1088) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0450 (1104) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x39A8, 0x6B2E, 0x7BD0, 0x528B, 0x39E9, 0x39E9, 0x4A4A, 0x52AC, 0x52AC, 0x52AC,   // 0x0460 (1120) pixels

0x632E, 0x630D, 0x73B0, 0xAD56, 0xCE7B, 0xD6BC, 0xD69B, 0xC63A, 0xCE59, 0xC618, 0xD6BB, 0xBDF8, 0xBDD7, 0xE71D, 0xF79F, 0x2124,   // 0x0470 (1136) pixels

0x0000, 0x0020, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0480 (1152) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0490 (1168) pixels

0x0000, 0x0001, 0x41E9, 0x736F, 0x6B4E, 0x422A, 0x31A8, 0x39C8, 0x4A4A, 0x5ACC, 0x5ACC, 0x5ACC, 0x630D, 0x630D, 0x6B4E, 0x9CD4,   // 0x04A0 (1184) pixels

0xB5B8, 0xAD77, 0xBDD8, 0xC619, 0xBDF8, 0xBDD7, 0xBDF8, 0xB576, 0x9CF4, 0xAD55, 0xFFFF, 0x8410, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x04B0 (1200) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x04C0 (1216) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0001, 0x41E9, 0x6B6F,   // 0x04D0 (1232) pixels

0x630D, 0x4A4A, 0x4209, 0x39E9, 0x4209, 0x52AC, 0x528B, 0x528B, 0x5ACC, 0x630D, 0x6B4E, 0x94B4, 0xAD77, 0x9CD4, 0xAD77, 0xCE7B,   // 0x04E0 (1248) pixels

0xC639, 0xCE59, 0xA515, 0x9CD4, 0x9472, 0x8C31, 0xCE59, 0xE71C, 0x0840, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x04F0 (1264) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0500 (1280) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x31A8, 0x5ACD, 0x52AC, 0x4A6B, 0x52AC, 0x422A,   // 0x0510 (1296) pixels

0x4209, 0x52AC, 0x4A6B, 0x4A4A, 0x4A6B, 0x528B, 0x5ACC, 0x8411, 0x9CD4, 0x8411, 0x8C52, 0xB5B7, 0xDEFC, 0xEF7E, 0xAD56, 0x8C72,   // 0x0520 (1312) pixels

0x8C72, 0x8431, 0x9CD3, 0xFFDF, 0x31A6, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0530 (1328) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0540 (1344) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x2946, 0x4A2A, 0x422A, 0x4A6B, 0x632E, 0x528B, 0x528B, 0x6B6F, 0x632E, 0x5AED,   // 0x0550 (1360) pixels

0x528B, 0x52AC, 0x5ACC, 0x6B6F, 0x8432, 0x7BD0, 0x738F, 0x9CD4, 0xD6BB, 0xEF7E, 0xCE59, 0x8C72, 0x8C31, 0x8411, 0x8C72, 0xE73D,   // 0x0560 (1376) pixels

0x73AE, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0570 (1392) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0580 (1408) pixels

0x0000, 0x0000, 0x2105, 0x39E9, 0x39E9, 0x4A6B, 0x6B4E, 0x528B, 0x4A6B, 0x6B6F, 0x630D, 0x4A6B, 0x4A6B, 0x528B, 0x528B, 0x528B,   // 0x0590 (1424) pixels

0x6B6F, 0x738F, 0x632E, 0x8C52, 0xB597, 0xCE7A, 0xDEFC, 0x94B3, 0x8411, 0x7BAF, 0x9CF4, 0xDEDB, 0xA534, 0x0020, 0x0000, 0x0000,   // 0x05A0 (1440) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x05B0 (1456) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0020, 0x0000, 0x0000, 0x0000, 0x0000, 0x18C4, 0x39A8,   // 0x05C0 (1472) pixels

0x31A8, 0x2967, 0x39C8, 0x528B, 0x630D, 0x5AED, 0x4209, 0x39E9, 0x39E9, 0x4A6B, 0x5AED, 0x630D, 0x5ACC, 0x5ACC, 0x630D, 0x632D,   // 0x05D0 (1488) pixels

0x7BD0, 0xB5B7, 0xD6BB, 0xC619, 0x8C52, 0x7BF0, 0xAD76, 0xD69A, 0xD6BA, 0x0861, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x05E0 (1504) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x05F0 (1520) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0020, 0x0000, 0x0000, 0x0000, 0x0001, 0x2105, 0x422A, 0x422A, 0x31A8, 0x4209, 0x5ACC,   // 0x0600 (1536) pixels

0x6B4E, 0x630D, 0x422A, 0x31A8, 0x39E9, 0x4A4A, 0x5ACC, 0x630D, 0x5AED, 0x5AED, 0x632E, 0x6B6F, 0x8C52, 0x9CD4, 0xC619, 0xDEBB,   // 0x0610 (1552) pixels

0xB5B8, 0xAD56, 0xC619, 0xC618, 0xEF5D, 0x4228, 0x0020, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0620 (1568) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0630 (1584) pixels

0x0000, 0x0020, 0x0000, 0x0000, 0x0000, 0x0001, 0x2967, 0x5AAC, 0x5AED, 0x4A4A, 0x528B, 0x632E, 0x6B6F, 0x632E, 0x4A6B, 0x31A8,   // 0x0640 (1600) pixels

0x422A, 0x4A6B, 0x52AC, 0x5AED, 0x5AED, 0x5AED, 0x632E, 0x73AF, 0x94B3, 0x9493, 0xA515, 0xC619, 0xC619, 0xC619, 0xB5B7, 0x94B3,   // 0x0650 (1616) pixels

0xDEFB, 0x738E, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0660 (1632) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0020, 0x0000, 0x0000,   // 0x0670 (1648) pixels

0x0000, 0x0001, 0x3187, 0x630E, 0x73B0, 0x630D, 0x6B4E, 0x73B0, 0x6B6F, 0x632E, 0x52AC, 0x39E9, 0x528B, 0x52AC, 0x5ACC, 0x5AED,   // 0x0680 (1664) pixels

0x6B4E, 0x738F, 0x7BD0, 0x8411, 0x9493, 0xA535, 0x9CD4, 0x94B3, 0xBDF8, 0xDEBC, 0xC5F8, 0x9CF4, 0xDEDB, 0x9492, 0x0000, 0x0000,   // 0x0690 (1680) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x06A0 (1696) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0020, 0x0000, 0x0000, 0x0000, 0x0000, 0x3187, 0x6B2E,   // 0x06B0 (1712) pixels

0x7BF1, 0x73B0, 0x8411, 0x8C52, 0x73B0, 0x632E, 0x5AED, 0x422A, 0x422A, 0x52AC, 0x52AC, 0x5ACC, 0x6B6F, 0x7BF1, 0x7BD0, 0x73B0,   // 0x06C0 (1728) pixels

0x9493, 0xAD56, 0x94B4, 0x7BD0, 0x9CD4, 0xC619, 0xC619, 0xB596, 0xDEFC, 0x94B3, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x06D0 (1744) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x06E0 (1760) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x3187, 0x6B4E, 0x73B0, 0x7BF1, 0x8C52, 0x9493,   // 0x06F0 (1776) pixels

0x8411, 0x6B6F, 0x6B4E, 0x5ACC, 0x4209, 0x528B, 0x528B, 0x5ACC, 0x7BF1, 0x94B4, 0x8C52, 0x7BF1, 0x9CD4, 0x9493, 0x9493, 0x7BF1,   // 0x0700 (1792) pixels

0x738F, 0x9473, 0xAD36, 0xA515, 0xCE7A, 0x8430, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0710 (1808) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0720 (1824) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0001, 0x39A8, 0x738F, 0x7BD0, 0x8411, 0x8411, 0x8432, 0x8411, 0x7BD0, 0x7BF1, 0x73B0,   // 0x0730 (1840) pixels

0x632E, 0x6B4E, 0x5AED, 0x6B4E, 0x9CD4, 0xBDD8, 0xB5B8, 0xAD77, 0x9CD4, 0x8411, 0x9473, 0x8C52, 0x73B0, 0x8C52, 0xA536, 0xB596,   // 0x0740 (1856) pixels

0xCE7A, 0x8430, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0750 (1872) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0760 (1888) pixels

0x0000, 0x0021, 0x39C9, 0x7BB0, 0x7BF1, 0x8411, 0x73B0, 0x73B0, 0x7BD0, 0x7BF1, 0x8C73, 0x8C73, 0x9CF5, 0x8C73, 0x6B6E, 0x6B4E,   // 0x0770 (1904) pixels

0x94B4, 0xB597, 0xB597, 0xB597, 0x9493, 0x8C31, 0x8C52, 0x8432, 0x8C32, 0x9CD4, 0xAD56, 0xC5F8, 0xD6BB, 0x8C51, 0x0000, 0x0000,   // 0x0780 (1920) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0790 (1936) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0001, 0x41E9, 0x7390,   // 0x07A0 (1952) pixels

0x73B0, 0x83F1, 0x8411, 0x7BD0, 0x73AF, 0x8411, 0x9CD4, 0xAD56, 0x9CF4, 0x8411, 0x6B6E, 0x8C31, 0xA535, 0xAD76, 0xB597, 0xAD56,   // 0x07B0 (1968) pixels

0xA535, 0x8431, 0x8C72, 0x8C72, 0x8C32, 0x94B3, 0xA515, 0xBDD8, 0xDEBB, 0x7BD0, 0x0001, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x07C0 (1984) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x07D0 (2000) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0001, 0x39E9, 0x738F, 0x7BD1, 0x8C73, 0x9493, 0x8411,   // 0x07E0 (2016) pixels

0x7BD0, 0x83F1, 0x94B3, 0xAD56, 0x8431, 0x7BF0, 0x738E, 0x7BF0, 0x9CD4, 0xB5B7, 0xC639, 0xBDF8, 0x9CD4, 0x8C52, 0x7BF0, 0x8411,   // 0x07F0 (2032) pixels

0x8C72, 0xAD76, 0xC619, 0xB597, 0xD6BB, 0x738F, 0x0001, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0800 (2048) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0810 (2064) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x39E9, 0x736F, 0x7BF1, 0x8C53, 0x8C52, 0x8411, 0x8431, 0x8C52, 0x9493, 0xA535,   // 0x0820 (2080) pixels

0x9493, 0x9493, 0x8C72, 0x9492, 0xA514, 0xB5B7, 0xCE5A, 0xD69A, 0xB597, 0xA515, 0x7BF0, 0x8431, 0x9CF4, 0xC619, 0xE71D, 0xBDF8,   // 0x0830 (2096) pixels

0xE71D, 0x5AEC, 0x0001, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0840 (2112) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0850 (2128) pixels

0x0000, 0x0000, 0x39C9, 0x736F, 0x7BB0, 0x7BD1, 0x7BB0, 0x7BD0, 0x9473, 0x9CB4, 0x9CB3, 0x9CF4, 0xAD56, 0xAD56, 0xA515, 0xA514,   // 0x0860 (2144) pixels

0x9CD4, 0x94B3, 0xAD35, 0xC639, 0xC619, 0xAD56, 0x9472, 0x94B3, 0xA4F4, 0xBDB7, 0xD67A, 0xBDF8, 0xE71D, 0x31A7, 0x0001, 0x0000,   // 0x0870 (2160) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0880 (2176) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x39E9, 0x738F,   // 0x0890 (2192) pixels

0x73B0, 0x7BD0, 0x7BD0, 0x83F1, 0x8C72, 0x9493, 0x94B3, 0x9CF4, 0xC619, 0xC619, 0xBDB7, 0xA535, 0x9492, 0x8411, 0x9CB3, 0xC619,   // 0x08A0 (2208) pixels

0xC619, 0xB597, 0xB5B7, 0xAD56, 0xA515, 0xAD76, 0xB5B7, 0xC619, 0xC639, 0x0821, 0x0000, 0x0001, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x08B0 (2224) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x08C0 (2240) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x41E9, 0x7BB0, 0x7BF1, 0x8432, 0x9473, 0x9473,   // 0x08D0 (2256) pixels

0x8431, 0x8411, 0x9493, 0xA515, 0xBDF8, 0xCE7A, 0xC619, 0xA4F4, 0x8C52, 0x8C72, 0xA535, 0xD67A, 0xC619, 0xC619, 0xC639, 0xAD56,   // 0x08E0 (2272) pixels

0xA515, 0xB597, 0xBDB7, 0xDEDC, 0xA4F4, 0x0000, 0x0001, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x08F0 (2288) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0900 (2304) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x420A, 0x7BD1, 0x8C52, 0x8432, 0x9493, 0x9493, 0x8411, 0x8411, 0x9CB3, 0xA4F4,   // 0x0910 (2320) pixels

0xAD76, 0xC619, 0xC5F8, 0xA4F4, 0x9472, 0x9492, 0x9CF4, 0xCE59, 0xBDD7, 0xB5B7, 0xAD55, 0xA515, 0xB576, 0xB576, 0xBDD7, 0xE71D,   // 0x0920 (2336) pixels

0x5AEC, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0930 (2352) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0940 (2368) pixels

0x0000, 0x0001, 0x422A, 0x83F1, 0x9493, 0x7BD0, 0x7BF0, 0x8C52, 0x8C52, 0x94B3, 0xA515, 0x9CD4, 0xB597, 0xC5F8, 0xCE39, 0xBDB7,   // 0x0950 (2384) pixels

0xAD55, 0x9493, 0x94B3, 0xC619, 0xB5B7, 0xAD76, 0x9493, 0xBDD7, 0xDEDC, 0xBDD8, 0xBDF8, 0xE73D, 0x1083, 0x0000, 0x0000, 0x0000,   // 0x0960 (2400) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0970 (2416) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0001, 0x4209, 0x7BB0,   // 0x0980 (2432) pixels

0x7BD0, 0x8411, 0x8432, 0x9493, 0xA4F5, 0xA4F5, 0x9CD4, 0x9CD4, 0xAD35, 0xC619, 0xCE7A, 0xBDD8, 0xBDF8, 0xCE5A, 0xC618, 0xBDD7,   // 0x0990 (2448) pixels

0xC618, 0xBDD7, 0xAD76, 0xD69A, 0xD69A, 0xBDD7, 0xD6BB, 0xA4F4, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x09A0 (2464) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x09B0 (2480) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0001, 0x4A2A, 0x83F1, 0x738F, 0x8C52, 0x9CB4, 0x9CD4,   // 0x09C0 (2496) pixels

0x94B3, 0x9493, 0x94B3, 0xA515, 0xCE7A, 0xCE5A, 0xCE7A, 0xCE59, 0xD67A, 0xD69A, 0xC619, 0xCE5A, 0xC639, 0xDEFC, 0xC639, 0xD69A,   // 0x09D0 (2512) pixels

0xD69B, 0xC618, 0xEF5E, 0x39C8, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x09E0 (2528) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x09F0 (2544) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0021, 0x4A6B, 0x8C52, 0x8C32, 0xA515, 0xAD56, 0xA4F5, 0x9CB4, 0x9CB4, 0xA515, 0xB597,   // 0x0A00 (2560) pixels

0xC639, 0xCE39, 0xD69A, 0xD69A, 0xD69A, 0xCE5A, 0xCE39, 0xDEFC, 0xDEBB, 0xF79E, 0xCE7A, 0xEF7E, 0xD69A, 0xEF5D, 0x9CD4, 0x0000,   // 0x0A10 (2576) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0A20 (2592) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0A30 (2608) pixels

0x0000, 0x0001, 0x526B, 0x9473, 0x94B4, 0x9CF5, 0x94B4, 0x8C52, 0x94B4, 0xAD36, 0xB576, 0xB597, 0xB597, 0xC5F8, 0xD67A, 0xCE7A,   // 0x0A40 (2624) pixels

0xCE7A, 0xD69A, 0xCE5A, 0xDEDB, 0xF7BF, 0xEF7E, 0xEF3D, 0xE71C, 0xE71D, 0xEF7E, 0x2125, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0A50 (2640) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0A60 (2656) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x4A4B, 0x8C73,   // 0x0A70 (2672) pixels

0x9493, 0x9CB4, 0x8C72, 0x8C32, 0x9CF5, 0xB597, 0xBDD8, 0xB5B7, 0xC639, 0xC619, 0xC639, 0xCE59, 0xDEDC, 0xE71C, 0xD69A, 0xD69A,   // 0x0A80 (2688) pixels

0xFFFF, 0xF79E, 0xFFFF, 0xCE59, 0xFFFF, 0x94B2, 0x0000, 0x0020, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0A90 (2704) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0AA0 (2720) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x4A4A, 0x8C52, 0x94B4, 0xA515, 0xA515, 0x9CF4,   // 0x0AB0 (2736) pixels

0xA536, 0xAD77, 0xAD76, 0xB597, 0xCE5A, 0xBDF8, 0xC5F8, 0xCE5A, 0xDEDC, 0xDEDC, 0xD69B, 0xE73D, 0xFFDF, 0xFFFF, 0xEF5D, 0xEF7E,   // 0x0AC0 (2752) pixels

0xDEFB, 0x2965, 0x0020, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0AD0 (2768) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0AE0 (2784) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0001, 0x4A4B, 0x8C52, 0x9493, 0x9CD5, 0x9CF5, 0x9CF4, 0xA515, 0xA515, 0xA515, 0xAD56,   // 0x0AF0 (2800) pixels

0xBDF8, 0xBDF8, 0xCE5A, 0xD67A, 0xD69B, 0xD69B, 0xD6BB, 0xF79F, 0xEF5D, 0xEF5D, 0xD69A, 0xEF5D, 0x6B4D, 0x0000, 0x0000, 0x0000,   // 0x0B00 (2816) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0B10 (2832) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0B20 (2848) pixels

0x0000, 0x0021, 0x4A6B, 0x8C52, 0x9493, 0x9493, 0x9473, 0x9CB4, 0xAD56, 0xB5B8, 0xBDD8, 0xC619, 0xC5F8, 0xCE7A, 0xDEDC, 0xD69A,   // 0x0B30 (2864) pixels

0xD6BB, 0xE71C, 0xDEDC, 0xE71C, 0xE71C, 0xCE59, 0xF79E, 0x8C51, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0B40 (2880) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0B50 (2896) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0020, 0x0000, 0x0000, 0x0000, 0x0000, 0x528B, 0x8C52,   // 0x0B60 (2912) pixels

0x9CB4, 0x9CB4, 0x9CD4, 0xA516, 0xB597, 0xBDD8, 0xC5F9, 0xC5F9, 0xBDD8, 0xCE7A, 0xE71D, 0xE71D, 0xEF7E, 0xEF5E, 0xCE7A, 0xCE7A,   // 0x0B70 (2928) pixels

0xCE59, 0xEF5D, 0x7BEF, 0x0000, 0x0000, 0x0841, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0B80 (2944) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0B90 (2960) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x528B, 0x8C72, 0x9CB4, 0x9493, 0x9473, 0x94B4,   // 0x0BA0 (2976) pixels

0xA535, 0xBDB8, 0xC639, 0xCE7A, 0xDEDC, 0xD6BB, 0xE71D, 0xEF3D, 0xE71D, 0xDEDB, 0xCE5A, 0xCE59, 0xF79E, 0x7BCF, 0x0861, 0x0000,   // 0x0BB0 (2992) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0BC0 (3008) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0BD0 (3024) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x52AB, 0x9493, 0x9CF4, 0x94B4, 0x9493, 0x94B4, 0xA536, 0xBDD8, 0xCE5A, 0xD69B,   // 0x0BE0 (3040) pixels

0xDEDC, 0xE73D, 0xF79F, 0xEF5E, 0xCE59, 0xC618, 0xE71C, 0xEF7E, 0x8431, 0x1082, 0x0000, 0x0020, 0x0000, 0x0000, 0x0841, 0x0000,   // 0x0BF0 (3056) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0C00 (3072) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0C10 (3088) pixels

0x0000, 0x0000, 0x52AB, 0x9492, 0x9CD4, 0x9CB4, 0x9CD4, 0xAD35, 0xBDD8, 0xCE5A, 0xD69B, 0xD6BB, 0xDEDC, 0xEF3D, 0xCE7A, 0xC618,   // 0x0C20 (3104) pixels

0xDEFC, 0xFFFF, 0xDEFC, 0x73AF, 0x0000, 0x0000, 0x0020, 0x0841, 0x0000, 0x0000, 0x0020, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0C30 (3120) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0C40 (3136) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0020, 0x0000, 0x0000, 0x0000, 0x0000, 0x52AB, 0x9492,   // 0x0C50 (3152) pixels

0x9472, 0x9493, 0x9CF4, 0xB576, 0xC619, 0xD69B, 0xDEDB, 0xDEDB, 0xDEFC, 0xDEDB, 0xCE39, 0xE71C, 0xF79E, 0xBDD7, 0x5ACB, 0x0000,   // 0x0C60 (3168) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0C70 (3184) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0C80 (3200) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0020, 0x0000, 0x0000, 0x0000, 0x0000, 0x52AB, 0x9493, 0x9CD4, 0x9CD4, 0xA515, 0xB596,   // 0x0C90 (3216) pixels

0xC618, 0xD67A, 0xD6BB, 0xD6BB, 0xCE39, 0xEF5D, 0xFFDF, 0xE73C, 0x9CD3, 0x3186, 0x0000, 0x0000, 0x0861, 0x0000, 0x0000, 0x0000,   // 0x0CA0 (3232) pixels

0x0020, 0x0000, 0x0000, 0x0020, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0CB0 (3248) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0CC0 (3264) pixels

0x0000, 0x0020, 0x0000, 0x0000, 0x0000, 0x0000, 0x5ACB, 0x94B3, 0xAD76, 0xAD56, 0xB576, 0xBDD8, 0xCE5A, 0xDEDB, 0xE71C, 0xE71C,   // 0x0CD0 (3280) pixels

0xFFFF, 0xF79E, 0xA514, 0x2945, 0x0000, 0x0020, 0x0841, 0x0000, 0x0000, 0x0000, 0x0841, 0x0841, 0x0000, 0x0000, 0x0020, 0x0000,   // 0x0CE0 (3296) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0CF0 (3312) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0D00 (3328) pixels

0x0000, 0x0000, 0x5ACC, 0x9CD3, 0xB576, 0xB596, 0xBDD7, 0xCE59, 0xE6FC, 0xF79E, 0xFFFF, 0xFFFF, 0xAD55, 0x39C7, 0x0000, 0x0000,   // 0x0D10 (3344) pixels

0x0000, 0x0000, 0x0000, 0x0020, 0x0020, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0D20 (3360) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0D30 (3376) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0020, 0x0000, 0x0000, 0x0021, 0x5ACB, 0xBDD8,   // 0x0D40 (3392) pixels

0xD69B, 0xD6BB, 0xEF5D, 0xE73D, 0xD69B, 0xAD55, 0x52AA, 0x0861, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0D50 (3408) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0D60 (3424) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0D70 (3440) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0841, 0x39C7, 0x7BAF, 0x7BF0, 0x6B6E, 0x5ACB, 0x2945,   // 0x0D80 (3456) pixels

0x0000, 0x0000, 0x0000, 0x0020, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0D90 (3472) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0DA0 (3488) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0DB0 (3504) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0021, 0x0000, 0x0000, 0x0021, 0x0000, 0x0000, 0x0001, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0DC0 (3520) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0DD0 (3536) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0DE0 (3552) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0DF0 (3568) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0001, 0x0000, 0x0021, 0x0001, 0x0000, 0x0000, 0x0000, 0x0001, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0E00 (3584) pixels

0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0E10 (3600) pixels

};

void showBitmap(){
  myGLCD.drawBitmap(5,160,60,60,first_quarter);
}

